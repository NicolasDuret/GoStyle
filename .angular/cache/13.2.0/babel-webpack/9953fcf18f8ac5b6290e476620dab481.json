{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/nicolasduret/Desktop/CODE/EPSI/Gostyle last/GoStyle/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/nicolasduret/Desktop/CODE/EPSI/Gostyle last/GoStyle/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nicolasduret/Desktop/CODE/EPSI/Gostyle last/GoStyle/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from '@cordobo/qrcode';\nvar _c0 = [\"qrcElement\"];\nvar QRCodeComponent = /*#__PURE__*/(function () {\n  var QRCodeComponent = /*#__PURE__*/function () {\n    function QRCodeComponent(renderer) {\n      _classCallCheck(this, QRCodeComponent);\n\n      this.renderer = renderer;\n      this.allowEmptyString = false;\n      this.colorDark = \"#000000ff\";\n      this.colorLight = \"#ffffffff\";\n      this.cssClass = \"qrcode\";\n      this.elementType = \"canvas\";\n      this.errorCorrectionLevel = \"M\";\n      this.margin = 4;\n      this.qrdata = \"\";\n      this.scale = 4;\n      this.width = 10;\n    }\n\n    _createClass(QRCodeComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this.createQRCode();\n      }\n    }, {\n      key: \"isValidQrCodeText\",\n      value: function isValidQrCodeText(data) {\n        if (this.allowEmptyString === false) {\n          return !(typeof data === \"undefined\" || data === \"\" || data === \"null\" || data === null);\n        }\n\n        return !(typeof data === \"undefined\");\n      }\n    }, {\n      key: \"toDataURL\",\n      value: function toDataURL() {\n        var _this = this;\n\n        return new Promise(function (resolve, reject) {\n          QRCode.toDataURL(_this.qrdata, {\n            color: {\n              dark: _this.colorDark,\n              light: _this.colorLight\n            },\n            errorCorrectionLevel: _this.errorCorrectionLevel,\n            margin: _this.margin,\n            scale: _this.scale,\n            version: _this.version,\n            width: _this.width\n          }, function (err, url) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(url);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"toCanvas\",\n      value: function toCanvas(canvas) {\n        var _this2 = this;\n\n        return new Promise(function (resolve, reject) {\n          QRCode.toCanvas(canvas, _this2.qrdata, {\n            color: {\n              dark: _this2.colorDark,\n              light: _this2.colorLight\n            },\n            errorCorrectionLevel: _this2.errorCorrectionLevel,\n            margin: _this2.margin,\n            scale: _this2.scale,\n            version: _this2.version,\n            width: _this2.width\n          }, function (error) {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(\"success\");\n            }\n          });\n        });\n      }\n    }, {\n      key: \"toSVG\",\n      value: function toSVG() {\n        var _this3 = this;\n\n        return new Promise(function (resolve, reject) {\n          QRCode.toString(_this3.qrdata, {\n            color: {\n              dark: _this3.colorDark,\n              light: _this3.colorLight\n            },\n            errorCorrectionLevel: _this3.errorCorrectionLevel,\n            margin: _this3.margin,\n            scale: _this3.scale,\n            type: \"svg\",\n            version: _this3.version,\n            width: _this3.width\n          }, function (err, url) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(url);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"renderElement\",\n      value: function renderElement(element) {\n        var _iterator = _createForOfIteratorHelper(this.qrcElement.nativeElement.childNodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n            this.renderer.removeChild(this.qrcElement.nativeElement, node);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.renderer.appendChild(this.qrcElement.nativeElement, element);\n      }\n    }, {\n      key: \"createQRCode\",\n      value: function createQRCode() {\n        var _this4 = this;\n\n        if (this.version && this.version > 40) {\n          console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n          this.version = 40;\n        } else if (this.version && this.version < 1) {\n          console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n          this.version = 1;\n        } else if (this.version !== undefined && isNaN(this.version)) {\n          console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n          this.version = undefined;\n        }\n\n        try {\n          if (!this.isValidQrCodeText(this.qrdata)) {\n            throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n          }\n\n          if (this.isValidQrCodeText(this.qrdata) && this.qrdata === \"\") {\n            this.qrdata = \" \";\n          }\n\n          var element;\n\n          switch (this.elementType) {\n            case \"canvas\":\n              element = this.renderer.createElement(\"canvas\");\n              this.toCanvas(element).then(function () {\n                _this4.renderElement(element);\n              }).catch(function (e) {\n                console.error(\"[angularx-qrcode] canvas error:\", e);\n              });\n              break;\n\n            case \"svg\":\n              element = this.renderer.createElement(\"div\");\n              this.toSVG().then(function (svgString) {\n                _this4.renderer.setProperty(element, \"innerHTML\", svgString);\n\n                var innerElement = element.firstChild;\n\n                _this4.renderer.setAttribute(innerElement, \"height\", \"\".concat(_this4.width));\n\n                _this4.renderer.setAttribute(innerElement, \"width\", \"\".concat(_this4.width));\n\n                _this4.renderElement(innerElement);\n              }).catch(function (e) {\n                console.error(\"[angularx-qrcode] svg error:\", e);\n              });\n              break;\n\n            case \"url\":\n            case \"img\":\n            default:\n              element = this.renderer.createElement(\"img\");\n              this.toDataURL().then(function (dataUrl) {\n                element.setAttribute(\"src\", dataUrl);\n\n                _this4.renderElement(element);\n              }).catch(function (e) {\n                console.error(\"[angularx-qrcode] img/url error:\", e);\n              });\n          }\n        } catch (e) {\n          console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n        }\n      }\n    }]);\n\n    return QRCodeComponent;\n  }();\n\n  QRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n    return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  QRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QRCodeComponent,\n    selectors: [[\"qrcode\"]],\n    viewQuery: function QRCodeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n      }\n    },\n    inputs: {\n      allowEmptyString: \"allowEmptyString\",\n      colorDark: \"colorDark\",\n      colorLight: \"colorLight\",\n      cssClass: \"cssClass\",\n      elementType: \"elementType\",\n      errorCorrectionLevel: \"errorCorrectionLevel\",\n      margin: \"margin\",\n      qrdata: \"qrdata\",\n      scale: \"scale\",\n      version: \"version\",\n      width: \"width\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"qrcElement\", \"\"]],\n    template: function QRCodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return QRCodeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar QRCodeModule = /*#__PURE__*/(function () {\n  var QRCodeModule = /*#__PURE__*/_createClass(function QRCodeModule() {\n    _classCallCheck(this, QRCodeModule);\n  });\n\n  QRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n    return new (t || QRCodeModule)();\n  };\n\n  QRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QRCodeModule\n  });\n  QRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: []\n  });\n  return QRCodeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nexport { QRCodeComponent, QRCodeModule }; //# sourceMappingURL=angularx-qrcode.mjs.map","map":null,"metadata":{},"sourceType":"module"}