{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{JmUR:function(t,e,r){\"use strict\";r.r(e),r.d(e,\"scopeCss\",function(){return k});var n=r(\"KQm4\"),c=\"-shadowcsshost\",o=\")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\",s=new RegExp(\"(-shadowcsshost\"+o,\"gim\"),a=new RegExp(\"(-shadowcsscontext\"+o,\"gim\"),i=new RegExp(\"(-shadowcssslotted\"+o,\"gim\"),u=\"-shadowcsshost-no-combinator\",l=/-shadowcsshost-no-combinator([^\\s]*)/,h=[/::shadow/g,/::content/g],p=/-shadowcsshost/gim,f=/:host/gim,g=/::slotted/gim,d=/:host-context/gim,m=/\\/\\*\\s*[\\s\\S]*?\\*\\//g,v=/\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g,w=/(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g,x=/([{}])/g,_=\"%BLOCK%\",b=function(t,e){var r=S(t),n=0;return r.escapedString.replace(w,function(){var t=arguments.length<=2?void 0:arguments[2],c=\"\",o=arguments.length<=4?void 0:arguments[4],s=\"\";o&&o.startsWith(\"{%BLOCK%\")&&(c=r.blocks[n++],o=o.substring(_.length+1),s=\"{\");var a={selector:t,content:c},i=e(a);return\"\".concat(arguments.length<=1?void 0:arguments[1]).concat(i.selector).concat(arguments.length<=3?void 0:arguments[3]).concat(s).concat(i.content).concat(o)})},S=function(t){for(var e=t.split(x),r=[],n=[],c=0,o=[],s=0;s<e.length;s++){var a=e[s];\"}\"===a&&c--,c>0?o.push(a):(o.length>0&&(n.push(o.join(\"\")),r.push(_),o=[]),r.push(a)),\"{\"===a&&c++}return o.length>0&&(n.push(o.join(\"\")),r.push(_)),{escapedString:r.join(\"\"),blocks:n}},O=function(t,e,r){return t.replace(e,function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];if(e[2]){for(var c=e[2].split(\",\"),o=[],s=0;s<c.length;s++){var a=c[s].trim();if(!a)break;o.push(r(u,a,e[3]))}return o.join(\",\")}return u+e[3]})},W=function(t,e,r){return t+e.replace(c,\"\")+r},j=function(t,e,r){return e.indexOf(c)>-1?W(t,e,r):t+e+r+\", \"+e+\" \"+t+r},R=function t(e,r,n,c,o){return b(e,function(e){var o=e.selector,s=e.content;return\"@\"!==e.selector[0]?o=function(t,e,r,n){return t.split(\",\").map(function(t){return n&&t.indexOf(\".\"+n)>-1?t.trim():function(t,e){return!function(t){return t=t.replace(/\\[/g,\"\\\\[\").replace(/\\]/g,\"\\\\]\"),new RegExp(\"^(\"+t+\")([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\",\"m\")}(e).test(t)}(t,e)?function(t,e,r){for(var n,c=\".\"+(e=e.replace(/\\[is=([^\\]]*)\\]/g,function(t){return arguments.length<=1?void 0:arguments[1]})),o=function(t){var n=t.trim();if(!n)return\"\";if(t.indexOf(u)>-1)n=function(t,e,r){if(p.lastIndex=0,p.test(t)){var n=\".\".concat(r);return t.replace(l,function(t,e){return e.replace(/([^:]*)(:*)(.*)/,function(t,e,r,c){return e+n+r+c})}).replace(p,n+\" \")}return e+\" \"+t}(t,e,r);else{var o=t.replace(p,\"\");if(o.length>0){var s=o.match(/([^:]*)(:*)(.*)/);s&&(n=s[1]+c+s[2]+s[3])}}return n},s=function(t){var e=[],r=0;return{content:(t=t.replace(/(\\[[^\\]]*\\])/g,function(t,n){var c=\"__ph-\".concat(r,\"__\");return e.push(n),r++,c})).replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g,function(t,n,c){var o=\"__ph-\".concat(r,\"__\");return e.push(c),r++,n+o}),placeholders:e}}(t),a=\"\",i=0,h=/( |>|\\+|~(?!=))\\s*/g,f=!((t=s.content).indexOf(u)>-1);null!==(n=h.exec(t));){var g=n[1],d=t.slice(i,n.index).trim(),m=(f=f||d.indexOf(u)>-1)?o(d):d;a+=\"\".concat(m,\" \").concat(g,\" \"),i=h.lastIndex}var v,w=t.substring(i);return a+=(f=f||w.indexOf(u)>-1)?o(w):w,v=s.placeholders,a.replace(/__ph-(\\d+)__/g,function(t,e){return v[+e]})}(t,e,r).trim():t.trim()}).join(\", \")}(e.selector,r,n,c):(e.selector.startsWith(\"@media\")||e.selector.startsWith(\"@supports\")||e.selector.startsWith(\"@page\")||e.selector.startsWith(\"@document\"))&&(s=t(e.content,r,n,c)),{selector:o.replace(/\\s{2,}/g,\" \").trim(),content:s}})},k=function(t,e,r){var o=e+\"-h\",l=e+\"-s\",p=t.match(v)||[];t=t.replace(m,\"\");var w=[];if(r){var x=function(t){var e=\"/*!@___\".concat(w.length,\"___*/\"),r=\"/*!@\".concat(t.selector,\"*/\");return w.push({placeholder:e,comment:r}),t.selector=e+t.selector,t};t=b(t,function(t){return\"@\"!==t.selector[0]?x(t):t.selector.startsWith(\"@media\")||t.selector.startsWith(\"@supports\")||t.selector.startsWith(\"@page\")||t.selector.startsWith(\"@document\")?(t.content=b(t.content,x),t):t})}var _=function(t,e,r,n,o){var l=function(t,e){var r=\".\"+e+\" > \",n=[];return t=t.replace(i,function(){for(var t=arguments.length,e=new Array(t),c=0;c<t;c++)e[c]=arguments[c];if(e[2]){for(var o=e[2].trim(),s=r+o+e[3],a=\"\",i=e[4]-1;i>=0;i--){var l=e[5][i];if(\"}\"===l||\",\"===l)break;a=l+a}var h=a+s,p=\"\".concat(a.trimRight()).concat(s.trim());if(h.trim()!==p.trim()){var f=\"\".concat(p,\", \").concat(h);n.push({orgSelector:h,updatedSelector:f})}return s}return u+e[3]}),{selectors:n,cssText:t}}(t=function(t){return O(t,a,j)}(t=function(t){return O(t,s,W)}(t=t.replace(d,\"-shadowcsscontext\").replace(f,c).replace(g,\"-shadowcssslotted\"))),n);return t=function(t){return h.reduce(function(t,e){return t.replace(e,\" \")},t)}(t=l.cssText),e&&(t=R(t,e,r,n)),{cssText:(t=(t=t.replace(/-shadowcsshost-no-combinator/g,\".\".concat(r))).replace(/>\\s*\\*\\s+([^{, ]+)/gm,\" $1 \")).trim(),slottedSelectors:l.selectors}}(t,e,o,l);return t=[_.cssText].concat(Object(n.a)(p)).join(\"\\n\"),r&&w.forEach(function(e){t=t.replace(e.placeholder,e.comment)}),_.slottedSelectors.forEach(function(e){t=t.replace(e.orgSelector,e.updatedSelector)}),t}}}]);","name":"56.ad08321754e8c7f3da21.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[56],{\n\n/***/ \"JmUR\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scopeCss\", function() { return scopeCss; });\n/* harmony import */ var _Users_nicolasduret_Desktop_CODE_EPSI_Gostyle_last_GoStyle_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"KQm4\");\n\n\n/*\n Stencil Client Platform v2.5.0 | MIT Licensed | https://stenciljs.com\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function safeSelector(selector) {\n  var placeholders = [];\n  var index = 0;\n  var content; // Replaces attribute selectors with placeholders.\n  // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  }); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n  // WS and \"+\" would otherwise be interpreted as selector separators.\n\n  content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  var ss = {\n    content: content,\n    placeholders: placeholders\n  };\n  return ss;\n};\n\nvar restoreSafeSelector = function restoreSafeSelector(placeholders, content) {\n  return content.replace(/__ph-(\\d+)__/g, function (_, index) {\n    return placeholders[+index];\n  });\n};\n\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nvar _polyfillHostContext = '-shadowcsscontext';\n\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\n\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\nvar stripComments = function stripComments(input) {\n  return input.replace(_commentRe, '');\n};\n\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nvar extractCommentsWithHash = function extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n};\n\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\n\nvar processRules = function processRules(input, ruleCallback) {\n  var inputWithEscapedBlocks = escapeBlocks(input);\n  var nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var selector = arguments.length <= 2 ? undefined : arguments[2];\n    var content = '';\n    var suffix = arguments.length <= 4 ? undefined : arguments[4];\n    var contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    var cssRule = {\n      selector: selector,\n      content: content\n    };\n    var rule = ruleCallback(cssRule);\n    return \"\".concat(arguments.length <= 1 ? undefined : arguments[1]).concat(rule.selector).concat(arguments.length <= 3 ? undefined : arguments[3]).concat(contentPrefix).concat(rule.content).concat(suffix);\n  });\n};\n\nvar escapeBlocks = function escapeBlocks(input) {\n  var inputParts = input.split(_curlyRe);\n  var resultParts = [];\n  var escapedBlocks = [];\n  var bracketCount = 0;\n  var currentBlockParts = [];\n\n  for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    var part = inputParts[partIndex];\n\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n\n      resultParts.push(part);\n    }\n\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n\n  var strEscapedBlocks = {\n    escapedString: resultParts.join(''),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\n\nvar insertPolyfillHostInCssText = function insertPolyfillHostInCssText(selector) {\n  selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n  return selector;\n};\n\nvar convertColonRule = function convertColonRule(cssText, regExp, partReplacer) {\n  // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n  return cssText.replace(regExp, function () {\n    for (var _len = arguments.length, m = new Array(_len), _key = 0; _key < _len; _key++) {\n      m[_key] = arguments[_key];\n    }\n\n    if (m[2]) {\n      var parts = m[2].split(',');\n      var r = [];\n\n      for (var i = 0; i < parts.length; i++) {\n        var p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n\n      return r.join(',');\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\n\nvar colonHostPartReplacer = function colonHostPartReplacer(host, part, suffix) {\n  return host + part.replace(_polyfillHost, '') + suffix;\n};\n\nvar convertColonHost = function convertColonHost(cssText) {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\n\nvar colonHostContextPartReplacer = function colonHostContextPartReplacer(host, part, suffix) {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + ', ' + part + ' ' + host + suffix;\n  }\n};\n\nvar convertColonSlotted = function convertColonSlotted(cssText, slotScopeId) {\n  var slotClass = '.' + slotScopeId + ' > ';\n  var selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, function () {\n    for (var _len2 = arguments.length, m = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      m[_key2] = arguments[_key2];\n    }\n\n    if (m[2]) {\n      var compound = m[2].trim();\n      var suffix = m[3];\n      var slottedSelector = slotClass + compound + suffix;\n      var prefixSelector = '';\n\n      for (var i = m[4] - 1; i >= 0; i--) {\n        var char = m[5][i];\n\n        if (char === '}' || char === ',') {\n          break;\n        }\n\n        prefixSelector = char + prefixSelector;\n      }\n\n      var orgSelector = prefixSelector + slottedSelector;\n      var addedSelector = \"\".concat(prefixSelector.trimRight()).concat(slottedSelector.trim());\n\n      if (orgSelector.trim() !== addedSelector.trim()) {\n        var updatedSelector = \"\".concat(addedSelector, \", \").concat(orgSelector);\n        selectors.push({\n          orgSelector: orgSelector,\n          updatedSelector: updatedSelector\n        });\n      }\n\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors: selectors,\n    cssText: cssText\n  };\n};\n\nvar convertColonHostContext = function convertColonHostContext(cssText) {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\n\nvar convertShadowDOMSelectors = function convertShadowDOMSelectors(cssText) {\n  return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n    return result.replace(pattern, ' ');\n  }, cssText);\n};\n\nvar makeScopeMatcher = function makeScopeMatcher(scopeSelector) {\n  var lre = /\\[/g;\n  var rre = /\\]/g;\n  scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n  return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\n\nvar selectorNeedsScoping = function selectorNeedsScoping(selector, scopeSelector) {\n  var re = makeScopeMatcher(scopeSelector);\n  return !re.test(selector);\n};\n\nvar applySimpleSelectorScope = function applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n  // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n  _polyfillHostRe.lastIndex = 0;\n\n  if (_polyfillHostRe.test(selector)) {\n    var replaceBy = \".\".concat(hostSelector);\n    return selector.replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n      return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n        return before + replaceBy + colon + after;\n      });\n    }).replace(_polyfillHostRe, replaceBy + ' ');\n  }\n\n  return scopeSelector + ' ' + selector;\n};\n\nvar applyStrictSelectorScope = function applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n  var isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector = scopeSelector.replace(isRe, function (_) {\n    return arguments.length <= 1 ? undefined : arguments[1];\n  });\n  var className = '.' + scopeSelector;\n\n  var _scopeSelectorPart = function _scopeSelectorPart(p) {\n    var scopedP = p.trim();\n\n    if (!scopedP) {\n      return '';\n    }\n\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n    } else {\n      // remove :host since it should be unnecessary\n      var t = p.replace(_polyfillHostRe, '');\n\n      if (t.length > 0) {\n        var matches = t.match(/([^:]*)(:*)(.*)/);\n\n        if (matches) {\n          scopedP = matches[1] + className + matches[2] + matches[3];\n        }\n      }\n    }\n\n    return scopedP;\n  };\n\n  var safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  var scopedSelector = '';\n  var startIndex = 0;\n  var res;\n  var sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n  // matches on ancestor elements and not on elements in the host's shadow\n  // `:host-context(div)` is transformed to\n  // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n  // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n  // Historically `component-tag:host` was matching the component so we also want to preserve\n  // this behavior to avoid breaking legacy apps (it should not match).\n  // The behavior should be:\n  // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n  // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n  //   `:host-context(tag)`)\n\n  var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n  var shouldScope = !hasHost;\n\n  while ((res = sep.exec(selector)) !== null) {\n    var separator = res[1];\n\n    var _part = selector.slice(startIndex, res.index).trim();\n\n    shouldScope = shouldScope || _part.indexOf(_polyfillHostNoCombinator) > -1;\n    var scopedPart = shouldScope ? _scopeSelectorPart(_part) : _part;\n    scopedSelector += \"\".concat(scopedPart, \" \").concat(separator, \" \");\n    startIndex = sep.lastIndex;\n  }\n\n  var part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\n\nvar scopeSelector = function scopeSelector(selector, scopeSelectorText, hostSelector, slotSelector) {\n  return selector.split(',').map(function (shallowPart) {\n    if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(', ');\n};\n\nvar scopeSelectors = function scopeSelectors(cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n  return processRules(cssText, function (rule) {\n    var selector = rule.selector;\n    var content = rule.content;\n\n    if (rule.selector[0] !== '@') {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n\n    var cssRule = {\n      selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n      content: content\n    };\n    return cssRule;\n  });\n};\n\nvar scopeCssText = function scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  var slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n\n  cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\".concat(hostScopeId));\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n  return {\n    cssText: cssText.trim(),\n    slottedSelectors: slotted.selectors\n  };\n};\n\nvar scopeCss = function scopeCss(cssText, scopeId, commentOriginalSelector) {\n  var hostScopeId = scopeId + '-h';\n  var slotScopeId = scopeId + '-s';\n  var commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  var orgSelectors = [];\n\n  if (commentOriginalSelector) {\n    var processCommentedSelector = function processCommentedSelector(rule) {\n      var placeholder = \"/*!@___\".concat(orgSelectors.length, \"___*/\");\n      var comment = \"/*!@\".concat(rule.selector, \"*/\");\n      orgSelectors.push({\n        placeholder: placeholder,\n        comment: comment\n      });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n\n    cssText = processRules(cssText, function (rule) {\n      if (rule.selector[0] !== '@') {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n\n      return rule;\n    });\n  }\n\n  var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText].concat(Object(_Users_nicolasduret_Desktop_CODE_EPSI_Gostyle_last_GoStyle_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(commentsWithHash)).join('\\n');\n\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(function (_ref) {\n      var placeholder = _ref.placeholder,\n          comment = _ref.comment;\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n\n  scoped.slottedSelectors.forEach(function (slottedSelector) {\n    cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\n\n\n\n/***/ })\n\n}]);","inputSourceMap":null}