{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, instanceAvailability, cordovaInstance } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\n\nvar InAppBrowserObject =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  /**\n   * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n   * @param {string} url     The URL to load.\n   * @param {string} [target=\"self\"]  The target in which to load the URL, an optional parameter that defaults to _self.\n   *                 _self: Opens in the WebView if the URL is in the white list, otherwise it opens in the InAppBrowser.\n   *                 _blank: Opens in the InAppBrowser.\n   *                 _system: Opens in the system's web browser.\n   * @param {string | InAppBrowserOptions} [options] Options for the InAppBrowser. Optional, defaulting to: location=yes.\n   *                 The options string must not contain any blank space, and each feature's\n   *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n   */\n  function InAppBrowserObject(url, target, options) {\n    try {\n      if (options && typeof options !== 'string') {\n        options = Object.keys(options).map(function (key) {\n          return key + \"=\" + options[key];\n        }).join(',');\n      }\n\n      this._objectInstance = cordova.InAppBrowser.open(url, target, options);\n    } catch (e) {\n      if (typeof window !== 'undefined') {\n        window.open(url, target);\n      }\n\n      console.warn('Native: InAppBrowser is not installed or you are running on a browser. Falling back to window.open.');\n    }\n  }\n\n  InAppBrowserObject.prototype._loadAfterBeforeload = function (strUrl) {\n    return cordovaInstance(this, \"_loadAfterBeforeload\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.show = function () {\n    return cordovaInstance(this, \"show\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.close = function () {\n    return cordovaInstance(this, \"close\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.hide = function () {\n    return cordovaInstance(this, \"hide\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  InAppBrowserObject.prototype.executeScript = function (script) {\n    return cordovaInstance(this, \"executeScript\", {}, arguments);\n  };\n\n  InAppBrowserObject.prototype.insertCSS = function (css) {\n    return cordovaInstance(this, \"insertCSS\", {}, arguments);\n  };\n\n  InAppBrowserObject.prototype.on = function (event) {\n    var _this = this;\n\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        return new Observable(function (observer) {\n          _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n\n          return function () {\n            return _this._objectInstance.removeEventListener(event, observer.next.bind(observer));\n          };\n        });\n      }\n    }();\n  };\n\n  InAppBrowserObject.prototype.on = function (event) {\n    var _this = this;\n\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        return new Observable(function (observer) {\n          _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n\n          return function () {\n            return _this._objectInstance.removeEventListener(event, observer.next.bind(observer));\n          };\n        });\n      }\n    }();\n  };\n\n  return InAppBrowserObject;\n}();\n\nexport { InAppBrowserObject };\n\nvar InAppBrowser =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(InAppBrowser, _super);\n\n  function InAppBrowser() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n   * @param  url {string}     The URL to load.\n   * @param  target {string}  The target in which to load the URL, an optional parameter that defaults to _self.\n   * @param  options {string} Options for the InAppBrowser. Optional, defaulting to: location=yes.\n   *                 The options string must not contain any blank space, and each feature's\n   *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n   * @returns {InAppBrowserObject}\n   */\n\n\n  InAppBrowser.prototype.create = function (url, target, options) {\n    return new InAppBrowserObject(url, target, options);\n  };\n\n  InAppBrowser.pluginName = \"InAppBrowser\";\n  InAppBrowser.plugin = \"cordova-plugin-inappbrowser\";\n  InAppBrowser.pluginRef = \"cordova.InAppBrowser\";\n  InAppBrowser.repo = \"https://github.com/apache/cordova-plugin-inappbrowser\";\n  InAppBrowser.platforms = [\"AmazonFire OS\", \"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\n\n  InAppBrowser.ɵfac = function InAppBrowser_Factory(t) {\n    return ɵInAppBrowser_BaseFactory(t || InAppBrowser);\n  };\n\n  InAppBrowser.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: InAppBrowser,\n    factory: function factory(t) {\n      return InAppBrowser.ɵfac(t);\n    }\n  });\n  var ɵInAppBrowser_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(InAppBrowser);\n  return InAppBrowser;\n}(IonicNativePlugin);\n\nexport { InAppBrowser };","map":null,"metadata":{},"sourceType":"module"}